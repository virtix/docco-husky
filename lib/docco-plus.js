// Generated by CoffeeScript 1.4.0
(function() {
  var DoccoPlus, Parser, Utils, dox, exec, fs, gravatar, jade, languages, path, showdown, spawn, walk, _, _ref;

  fs = require('fs');

  path = require('path');

  showdown = require('./../vendor/showdown').Showdown;

  jade = require('jade');

  dox = require('dox');

  gravatar = require('gravatar');

  _ = require('underscore');

  walk = require('walk');

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  languages = require('./../lib/languages').languages();

  DoccoPlus = (function() {
    var _version;

    function DoccoPlus() {}

    _version = '0.9';

    DoccoPlus.prototype.get_version = function() {
      return _version;
    };

    return DoccoPlus;

  })();

  Parser = (function() {

    function Parser() {}

    Parser.prototype.get_parser = function() {
      return this;
    };

    return Parser;

  })();

  Utils = (function() {

    function Utils() {}

    Utils.prototype.get_language = function(source_path, languages) {
      var ext, k, key, key_array, lang, _i, _len;
      ext = path.extname(source_path);
      for (key in languages) {
        lang = languages[key];
        key_array = key.split(',');
        for (_i = 0, _len = key_array.length; _i < _len; _i++) {
          k = key_array[_i];
          if (k === ext) {
            return lang.name;
          }
        }
      }
      throw new Error('No language found for extension: ' + ext);
    };

    Utils.prototype.ensure_directory = function(dir, callback) {
      exec('mkdir -p dir');
      return callback();
    };

    Utils.prototype.file_exists = function(path) {
      try {
        return fs.lstatSync(path).isFile;
      } catch (ex) {
        return false;
      }
    };

    return Utils;

  })();

  module.exports.DoccoPlus = DoccoPlus;

  module.exports.Parser = Parser;

  module.exports.Utils = Utils;

}).call(this);

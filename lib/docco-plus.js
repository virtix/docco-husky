// Generated by CoffeeScript 1.4.0
(function() {
  var DoccoPlus, Parser, Utils, dox, exec, ffi, fs, gravatar, jade, languages, path, showdown, spawn, walk, _, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  showdown = require('./../vendor/showdown').Showdown;

  jade = require('jade');

  dox = require('dox');

  gravatar = require('gravatar');

  _ = require('underscore');

  walk = require('walk');

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  ffi = require('ffi');

  languages = require('./../lib/languages').languages();

  DoccoPlus = (function() {
    var _version;

    function DoccoPlus() {}

    _version = '0.9';

    DoccoPlus.prototype.get_version = function() {
      return _version;
    };

    return DoccoPlus;

  })();

  Parser = (function() {

    function Parser() {}

    Parser.prototype.get_parser = function() {
      return this;
    };

    return Parser;

  })();

  Utils = (function() {

    function Utils() {
      this.sync_exec = __bind(this.sync_exec, this);

    }

    Utils.prototype.build_files = function(dirs, languages) {
      var cmd, ext, files, lang_filter;
      lang_filter = (function() {
        var _results;
        _results = [];
        for (ext in languages) {
          _results.push(" -name '*" + ext + "' ");
        }
        return _results;
      })();
      lang_filter = lang_filter.join(' -o ');
      cmd = "find " + dirs + " " + lang_filter;
      files = this.sync_exec(cmd);
      return files.split('\n').filter(function(file_name, index, array) {
        return file_name !== '' && path.basename(file_name) !== '.';
      });
    };

    Utils.prototype.sync_exec = function(cmd) {
      var buffer, fp, libc, result;
      libc = ffi.Library(null, {
        popen: ['pointer', ['string', 'string']],
        pclose: ['void', ['pointer']],
        fgets: ['string', ['pointer', 'int', 'pointer']],
        system: ['int32', ['string']]
      });
      buffer = new Buffer(1024);
      result = '';
      fp = libc.popen(cmd, 'r');
      if (!fp) {
        throw new Error('Error: Could not open command: ' + cmd);
      }
      while (libc.fgets(buffer, 1024, fp)) {
        result += buffer.readCString();
      }
      libc.pclose(fp);
      return result;
    };

    Utils.prototype.get_language = function(source_path, languages) {
      var ext, k, key, key_array, lang, _i, _len;
      ext = path.extname(source_path);
      for (key in languages) {
        lang = languages[key];
        key_array = key.split(',');
        for (_i = 0, _len = key_array.length; _i < _len; _i++) {
          k = key_array[_i];
          if (k === ext) {
            return lang.name;
          }
        }
      }
      throw new Error('No language found for extension: ' + ext);
    };

    Utils.prototype.ensure_directory = function(dir, callback) {
      exec('mkdir -p dir');
      return callback();
    };

    Utils.prototype.file_exists = function(path) {
      try {
        return fs.lstatSync(path).isFile;
      } catch (ex) {
        return false;
      }
    };

    return Utils;

  })();

  module.exports.DoccoPlus = DoccoPlus;

  module.exports.Parser = Parser;

  module.exports.Utils = Utils;

}).call(this);
